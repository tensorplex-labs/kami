{"openapi":"3.0.0","paths":{"/substrate/available-runtime-apis":{"get":{"description":"Retrieves all available runtime APIs","operationId":"getAvailableRuntimeApis","parameters":[],"responses":{"200":{"description":"Available runtime APIs retrieved successfully"}},"summary":"Get available runtime APIs","tags":["substrate"]}},"/substrate/keyring-pair-info":{"get":{"description":"Retrieves the current keyring pair information","operationId":"getKeyringPairInfo","parameters":[],"responses":{"200":{"description":"Keyring pair info retrieved successfully"}},"summary":"Get keyring pair info","tags":["substrate"]}},"/chain/subnet-metagraph/{netuid}":{"get":{"description":"Retrieves all subnet metagraph information by netuid","operationId":"getSubnetMetagraph","parameters":[{"name":"netuid","required":true,"in":"path","description":"Network UID","schema":{"type":"number"}}],"responses":{"200":{"description":"Subnet metagraph retrieved successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/SubnetMetagraphDto"}}}]}}}}},"summary":"Get subnet metagraph","tags":["subnet"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = 1\n    metagraph = await kami.get_metagraph(netuid)\n    print(metagraph)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"},{"lang":"TypeScript","label":"TypeScript","source":"import axios, { AxiosInstance } from 'axios';\nimport { IApiResponse, SubnetMetagraphDto } from 'kami';\n\n// Import the response and DTO types\ninterface IApiResponse<T = any> {\n  statusCode: number;\n  success: boolean;\n  data: T | null;\n  error: {\n    type: string;\n    message: string;\n    stackTrace?: string;\n  } | null;\n}\n\n// Simplified version of SubnetMetagraphDto\ninterface SubnetMetagraphDto {\n  netuid: number;\n  n: number;\n  neurons: Array<{\n    uid: number;\n    active: boolean;\n    stake: string;\n    rank: number;\n    emission: number;\n    incentive: number;\n    consensus: number;\n    trust: number;\n    validator_trust: number;\n    dividends: number;\n    // Additional neuron properties\n  }>;\n  // Other metagraph properties\n}\n\n// Custom error classes matching the API's error structure\nclass KamiApiError extends Error {\n  constructor(\n    public readonly type: string,\n    message: string,\n    public readonly statusCode: number,\n    public readonly stackTrace?: string,\n  ) {\n    super(message);\n    this.name = 'KamiApiError';\n  }\n}\n\nclass SubnetMetagraphNotFoundError extends KamiApiError {\n  constructor(subnetId: string | number) {\n    super('SUBNET_METAGRAPH.NOT_FOUND', `Subnet metagraph with ID ${subnetId} not found`, 404);\n    this.name = 'SubnetMetagraphNotFoundError';\n  }\n}\n\nclass InvalidSubnetIdError extends KamiApiError {\n  constructor(subnetId: string | number) {\n    super('SUBNET_METAGRAPH.INVALID_SUBNET_ID', `Invalid subnet ID: ${subnetId}`, 400);\n    this.name = 'InvalidSubnetIdError';\n  }\n}\n\n/**\n * Tensorplex API Client\n * A client for interacting with the Tensorplex Kami API\n */\nexport class KamiClient {\n  private readonly client: AxiosInstance;\n\n  /**\n   * Creates a new Tensorplex API client\n   *\n   * @param baseUrl - Base URL of the Tensorplex API (defaults to localhost:3000)\n   * @param apiKey - Optional API key for authentication\n   */\n  constructor(\n    baseUrl: string = 'http://localhost:3000',\n    private readonly apiKey?: string,\n  ) {\n    this.client = axios.create({\n      baseURL: baseUrl,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(apiKey ? { Authorization: `Bearer ${apiKey}` } : {}),\n      },\n    });\n\n    // Add response interceptor to handle errors consistently\n    this.client.interceptors.response.use(\n      response => response,\n      error => {\n        if (axios.isAxiosError(error) && error.response) {\n          const data = error.response.data as IApiResponse<any>;\n\n          if (data?.error) {\n            // Map API error types to custom error classes\n            if (data.error.type === 'SUBNET_METAGRAPH.NOT_FOUND') {\n              throw new SubnetMetagraphNotFoundError(error.config?.params?.netuid || 'unknown');\n            } else if (data.error.type === 'SUBNET_METAGRAPH.INVALID_SUBNET_ID') {\n              throw new InvalidSubnetIdError(error.config?.params?.netuid || 'unknown');\n            } else {\n              throw new KamiApiError(\n                data.error.type,\n                data.error.message,\n                error.response.status,\n                data.error.stackTrace,\n              );\n            }\n          }\n        }\n\n        // Default error handling\n        throw error;\n      },\n    );\n  }\n\n  /**\n   * Get subnet metagraph information\n   *\n   * @param netuid - Network UID to fetch metagraph information for\n   * @returns Promise resolving to subnet metagraph data\n   */\n  async getSubnetMetagraph(netuid: number): Promise<SubnetMetagraphDto> {\n    try {\n      const response = await this.client.get<IApiResponse<SubnetMetagraphDto>>(\n        `/chain/subnet-metagraph/${netuid}`,\n      );\n\n      if (!response.data.success || !response.data.data) {\n        throw new Error('Failed to get subnet metagraph data');\n      }\n\n      return response.data.data;\n    } catch (error) {\n      // Custom errors are already handled by the interceptor\n      if (error instanceof KamiApiError) {\n        throw error;\n      }\n\n      // For any other errors\n      throw new Error(`Failed to fetch subnet metagraph: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Example usage of the KamiClient\n */\nasync function main() {\n  // Initialize the client\n  const client = new KamiClient('http://localhost:8882');\n\n  try {\n    // Fetch subnet metagraph with netuid 1\n    console.log('Fetching subnet metagraph for netuid 1...');\n    const metagraph = await client.getSubnetMetagraph(1);\n\n    console.log(`Successfully retrieved metagraph for subnet ${metagraph.netuid}`);\n    console.log(`Total neurons: ${metagraph.n}`);\n\n    // Calculate some statistics\n    const activeNeurons = metagraph.neurons.filter(n => n.active).length;\n    const totalStake = metagraph.neurons.reduce((sum, n) => sum + parseFloat(n.stake), 0);\n\n    console.log(\n      `Active neurons: ${activeNeurons}/${metagraph.n} (${((activeNeurons / metagraph.n) * 100).toFixed(2)}%)`,\n    );\n    console.log(`Total stake: ${totalStake.toFixed(2)} TAO`);\n\n    // Find top 5 validators by stake\n    const topValidators = [...metagraph.neurons]\n      .sort((a, b) => parseFloat(b.stake) - parseFloat(a.stake))\n      .slice(0, 5);\n\n    console.log('\\nTop 5 validators by stake:');\n    topValidators.forEach((validator, index) => {\n      console.log(`${index + 1}. UID ${validator.uid}: ${validator.stake} TAO`);\n    });\n  } catch (error) {\n    if (error instanceof SubnetMetagraphNotFoundError) {\n      console.error('Subnet not found! Please check if the subnet exists.');\n    } else if (error instanceof InvalidSubnetIdError) {\n      console.error('Invalid subnet ID! Please provide a valid numeric ID.');\n    } else if (error instanceof KamiApiError) {\n      console.error(`API Error (${error.statusCode}): ${error.type} - ${error.message}`);\n    } else {\n      console.error('Unexpected error:', error.message);\n    }\n  }\n}\n\n// Run the example\nmain().catch(console.error);\n"}]}},"/chain/serve-axon":{"post":{"description":"Must setup Bittensor wallet in env","operationId":"serveAxon","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AxonCallParamsDto"}}}},"responses":{"201":{"description":""}},"summary":"Serve axon","tags":["subnet"]}},"/chain/check-hotkey":{"get":{"operationId":"checkHotkey","parameters":[{"name":"netuid","required":true,"in":"query","description":"Subnet UID","schema":{"example":52,"type":"number"}},{"name":"hotkey","required":true,"in":"query","description":"Hotkey","schema":{"example":"5E4z3h9yVhmQyCFWNbY9BPpwhx4xFiPwq3eeqmBgVF6KULde","type":"string"}},{"name":"block","required":false,"in":"query","description":"Block","schema":{"type":"number"}}],"responses":{"200":{"description":""}},"tags":["subnet"]}},"/chain/subnet-hyperparameters/{netuid}":{"get":{"description":"Retrieves all subnet hyperparameter information by netuid","operationId":"getSubnetHyperparams","parameters":[{"name":"netuid","required":true,"in":"path","description":"Network UID","schema":{"type":"number"}}],"responses":{"200":{"description":"Subnet hyperparameter retrieved successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SubnetHyperparamsResponseDto"}}}}},"summary":"Get subnet hyperparameter","tags":["subnet"]}},"/chain/latest-block":{"get":{"description":"Retrieves the latest block from the blockchain","operationId":"getLatestBlock","parameters":[],"responses":{"200":{"description":"Latest block retrieved successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LatestBlockDto"}}}}},"summary":"Get latest block","tags":["substrate"]}},"/chain/set-weights":{"post":{"description":"Must setup Bittensor wallet in env","operationId":"setWeights","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetWeightsParamsDto"}}}},"responses":{"default":{"description":"Commit hash (To be used for Commit Reveal)","content":{"application/json":{"example":"0x8141db6ceb557923a25fe19255adb17e4576013942da669855ac2f831e582cce"}}}},"summary":"Set weights","tags":["subnet"]}},"/chain/set-commit-reveal-weights":{"post":{"description":"Must setup Bittensor wallet in env","operationId":"setCommitRevealWeights","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetCommitRevealWeightsParamsDto"}}}},"responses":{"200":{"description":"Commit reveal weights set successfully","content":{"application/json":{"example":"0xfd5e598f4640ced068e88ed8b1d3d367ea30bb7af00c93f99ff90e3020037973"}}}},"summary":"Set commit reveal weights","tags":["subnet"]}}},"info":{"title":"Tensorplex Kami","description":"Lightweight, developer-friendly Typescript library built as an alternative way to interact with the Bittensor chain!","version":"1.0","contact":{"name":"Tensorplex Labs","url":"https://tensorplex.ai","email":""}},"tags":[],"servers":[{"url":"http://localhost:8882","description":"Development"}],"components":{"schemas":{"ErrorDto":{"type":"object","properties":{"type":{"type":"string","description":"Error Type Enum Defined in Exception","example":"SUBNET_METAGRAPH.NOT_FOUND"},"message":{"type":"string","description":"Error Message","example":"Subnet metagraph with ID 1000 not found"},"stackTrace":{"type":"string","description":"Error Stack Trace"}},"required":["type","message"]},"ApiResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"Status Code","example":200},"success":{"type":"boolean","description":"Success","example":true},"data":{"type":"object","description":"Data","example":null},"error":{"description":"Error","example":null,"allOf":[{"$ref":"#/components/schemas/ErrorDto"}]}},"required":["statusCode","success","data","error"]},"SubnetIdentityDto":{"type":"object","properties":{"subnetName":{"type":"string","description":"The subnet name","example":"Dojo"},"githubRepo":{"type":"string","description":"The GitHub repository","example":"https://github.com/tensorplex-labs/dojo"},"subnetContact":{"type":"string","description":"The contact URL","example":"jarvis@tensorplex.ai"},"subnetUrl":{"type":"string","description":"The URL","example":"https://dojo.network"},"discord":{"type":"string","description":"The Discord URL","example":"https://discord.com/channels/799672011265015819/1213131262483628102"},"description":{"type":"string","description":"The description","example":"Premier Infrastructure Layer for Human Intelligence."},"additional":{"type":"string","description":"The additional information","example":"~"}},"required":["subnetName","githubRepo","subnetContact","subnetUrl","discord","description","additional"]},"IdentitiesInfoDto":{"type":"object","properties":{"name":{"type":"string","description":"Name","example":""},"url":{"type":"string","description":"URL","example":""},"githubRepo":{"type":"string","description":"GitHub Repository","example":""},"image":{"type":"string","description":"Image","example":""},"discord":{"type":"string","description":"Discord","example":""},"description":{"type":"string","description":"Description","example":""},"additional":{"type":"string","description":"Additional","example":""}},"required":["name","url","githubRepo","image","discord","description","additional"]},"AxonInfoDto":{"type":"object","properties":{"block":{"type":"number","description":"Block","example":0},"version":{"type":"number","description":"Version","example":0},"ip":{"type":"number","description":"IP","example":0},"port":{"type":"number","description":"Port","example":0},"ipType":{"type":"number","description":"IP Type (v4 or v6)","example":4},"protocol":{"type":"number","description":"Protocol","example":4},"placeholder1":{"type":"number","description":"Placeholder 1","example":0},"placeholder2":{"type":"number","description":"Placeholder 2","example":0}},"required":["block","version","ip","port","ipType","protocol","placeholder1","placeholder2"]},"SubnetMetagraphDto":{"type":"object","properties":{"netuid":{"type":"number","description":"The subnet UID","example":1},"name":{"description":"The subnet name","example":"Tensorplex Dojo","type":"array","items":{"type":"string"}},"symbol":{"description":"The subnet symbol","example":"ا","type":"array","items":{"type":"string"}},"identity":{"description":"The subnet identity","allOf":[{"$ref":"#/components/schemas/SubnetIdentityDto"}]},"networkRegisteredAt":{"type":"number","description":"The network registered at","example":3989825},"ownerHotkey":{"type":"string","description":"The owner hotkey","example":"5EgfUiH6A99dhihMzp7eMM8UDkvmFjCWgM5gnpBN8UgLrVuz"},"ownerColdkey":{"type":"string","description":"The owner coldkey","example":"5EgfUiH6A99dhihMzp7eMM8UDkvmFjCWgM5gnpBN8UgLrVuz"},"block":{"type":"number","description":"Current block","example":3989825},"tempo":{"type":"number","description":"The tempo","example":360},"lastStep":{"type":"number","description":"Last step","example":170},"blocksSinceLastStep":{"type":"number","description":"Blocks since last step","example":3989825},"subnetEmission":{"type":"number","description":"Subnet emission","example":0},"alphaIn":{"type":"number","description":"alpha_in","example":0},"alphaOut":{"type":"number","description":"alpha_out","example":0},"taoIn":{"type":"number","description":"tao_in","example":0},"alphaOutEmission":{"type":"number","description":"alpha_out_emission","example":1},"alphaInEmission":{"type":"number","description":"alpha_in_emission","example":0},"taoInEmission":{"type":"number","description":"tao_in_emission","example":0},"pendingAlphaEmission":{"type":"number","description":"pending_alpha_emission","example":0},"pendingRootEmission":{"type":"number","description":"pending_root_emission","example":0},"subnetVolume":{"type":"number","description":"subnet_volume","example":0},"movingPrice":{"type":"object","description":"moving_price","example":{"bits":0}},"rho":{"type":"number","description":"rho","example":0},"kappa":{"type":"number","description":"kappa","example":0},"minAllowedWeights":{"type":"number","description":"Min Allowed Weights","example":0},"maxAllowedWeights":{"type":"number","description":"Max Allowed Weights","example":0},"weightsVersion":{"type":"number","description":"Weights Version","example":0},"weightsRateLimit":{"type":"number","description":"Weights Rate Limit","example":0},"activityCutoff":{"type":"number","description":"Activity Cutoff","example":0},"maxValidators":{"type":"number","description":"Max Validators","example":0},"numUids":{"type":"number","description":"Current number of UIDs","example":0},"maxUids":{"type":"number","description":"Max UIDs","example":0},"burn":{"type":"number","description":"Burn","example":0},"difficulty":{"type":"number","description":"Difficulty","example":0},"registrationAllowed":{"type":"boolean","description":"Registration Allowed","example":false},"powRegistrationAllowed":{"type":"boolean","description":"Pow Registration Allowed","example":false},"immunityPeriod":{"type":"number","description":"Immunity Period","example":0},"minDifficulty":{"type":"number","description":"Min Difficulty","example":0},"maxDifficulty":{"type":"string","description":"Max Difficulty","example":1},"minBurn":{"type":"number","description":"Min Burn","example":0},"maxBurn":{"type":"number","description":"Max Burn","example":0},"adjustmentAlpha":{"type":"string","description":"Adjustment Alpha","example":0},"adjustmentInterval":{"type":"number","description":"Adjustment Interval","example":0},"targetRegsPerInterval":{"type":"number","description":"Target Registrations Per Interval","example":0},"maxRegsPerBlock":{"type":"number","description":"Max Registrations Per Block","example":0},"servingRateLimit":{"type":"number","description":"Serving Rate Limit","example":0},"commitRevealWeightsEnabled":{"type":"boolean","description":"Commit Reveal Weights Enabled","example":false},"commitRevealPeriod":{"type":"number","description":"Commit Reveal Epoch","example":0},"liquidAlphaEnabled":{"type":"boolean","description":"Liquid Alpha Enabled","example":false},"alphaHigh":{"type":"number","description":"Alpha High","example":0},"alphaLow":{"type":"number","description":"Alpha Low","example":0},"bondsMovingAvg":{"type":"number","description":"Bonds Moving Average","example":0},"hotkeys":{"description":"Hotkeys","example":[],"type":"array","items":{"type":"string"}},"coldkeys":{"description":"Coldkeys","example":[],"type":"array","items":{"type":"string"}},"identities":{"description":"Identities","type":"array","items":{"$ref":"#/components/schemas/IdentitiesInfoDto"}},"axons":{"description":"Axons","type":"array","items":{"$ref":"#/components/schemas/AxonInfoDto"}},"active":{"description":"Active","example":[false],"type":"array","items":{"type":"string"}},"validatorPermit":{"description":"Validator Permit","example":[false],"type":"array","items":{"type":"string"}},"pruningScore":{"description":"Pruning Score","example":[0],"type":"array","items":{"type":"string"}},"lastUpdate":{"description":"Last Update","example":[0],"type":"array","items":{"type":"string"}},"emission":{"description":"Emission","example":[0],"type":"array","items":{"type":"string"}},"dividends":{"description":"Dividends","example":[0],"type":"array","items":{"type":"string"}},"incentives":{"description":"Incentives","example":[0],"type":"array","items":{"type":"string"}},"consensus":{"description":"Consensus","example":[0],"type":"array","items":{"type":"string"}},"trust":{"description":"Trust","example":[0],"type":"array","items":{"type":"string"}},"rank":{"description":"Rank","example":[0],"type":"array","items":{"type":"string"}},"blockAtRegistration":{"description":"Block At Registration","example":[0],"type":"array","items":{"type":"string"}},"alphaStake":{"description":"Alpha Stake","example":[0],"type":"array","items":{"type":"string"}},"taoStake":{"description":"Root Stake","example":[0],"type":"array","items":{"type":"string"}},"totalStake":{"description":"Total Stake","example":[0],"type":"array","items":{"type":"string"}},"taoDividendsPerHotkey":{"description":"Tao Dividends Per Hotkey","example":["",0],"type":"array","items":{"type":"string"}},"alphaDividendsPerHotkey":{"description":"Alpha Dividends Per Hotkey","example":["",0],"type":"array","items":{"type":"string"}}},"required":["netuid","name","symbol","identity","networkRegisteredAt","ownerHotkey","ownerColdkey","block","tempo","lastStep","blocksSinceLastStep","subnetEmission","alphaIn","alphaOut","taoIn","alphaOutEmission","alphaInEmission","taoInEmission","pendingAlphaEmission","pendingRootEmission","subnetVolume","movingPrice","rho","kappa","minAllowedWeights","maxAllowedWeights","weightsVersion","weightsRateLimit","activityCutoff","maxValidators","numUids","maxUids","burn","difficulty","registrationAllowed","powRegistrationAllowed","immunityPeriod","minDifficulty","maxDifficulty","minBurn","maxBurn","adjustmentAlpha","adjustmentInterval","targetRegsPerInterval","maxRegsPerBlock","servingRateLimit","commitRevealWeightsEnabled","commitRevealPeriod","liquidAlphaEnabled","alphaHigh","alphaLow","bondsMovingAvg","hotkeys","coldkeys","identities","axons","active","validatorPermit","pruningScore","lastUpdate","emission","dividends","incentives","consensus","trust","rank","blockAtRegistration","alphaStake","taoStake","totalStake","taoDividendsPerHotkey","alphaDividendsPerHotkey"]},"AxonCallParamsDto":{"type":"object","properties":{"version":{"type":"number","description":"Version","example":0},"ip":{"type":"number","title":"IP","description":"Decimal representation of the IP address","example":"2240446049"},"port":{"type":"number","description":"Port","example":8888},"ipType":{"type":"number","description":"IP Type (v4 or v6)","example":4},"netuid":{"type":"number","description":"Netuid","example":2},"protocol":{"type":"number","description":"Protocol","example":4},"placeholder1":{"type":"number","description":"Placeholder 1","example":0},"placeholder2":{"type":"number","description":"Placeholder 2","example":0}},"required":["version","ip","port","ipType","netuid","protocol","placeholder1","placeholder2"]},"SubnetHyperparamsResponseDto":{"type":"object","properties":{"rho":{"type":"number","description":"Scaling factor in the sigmoid that normalises the steepness of the sigmoid curve."},"kappa":{"type":"number","description":"The consensus majority ratio: The weights set by validators who have lower normalized stake than Kappa are not used in calculating consensus, which affects ranks, which affect incentives. The consensus threshold for bond-clipping during [Yuma Consensus](https://docs.bittensor.com/yuma-consensus)."},"immunityPeriod":{"type":"number","description":"The number of blocks after registration when a miner is protected from deregistration."},"minAllowedWeights":{"type":"number","description":"Minimum number of weights for a validator to set when setting weights."},"maxWeightsLimit":{"type":"number","description":"The limit for the u16-normalized weights. If some weight is greater than this limit when all weights are normalized so that maximum weight is 65535, then it will not be used."},"tempo":{"type":"number","description":"Length of subnet tempo in blocks. See [Emissions](https://docs.bittensor.com/emissions)."},"minDifficulty":{"type":"number","description":"The minimum of the range of the proof-of-work for registering on the subnet."},"maxDifficulty":{"type":"number","description":"The maximum of the dynamic range for difficulty of proof-of-work registration on the subnet."},"weightsVersion":{"type":"number","description":"If the version key specified in set_weights extrinsic is lower than this system-wide setting (WeightsVersionKey), the transaction will fail. This is a fool-proofing protection for validators to update, not a security feature."},"weightsRateLimit":{"type":"number","description":"How long, in blocks, a validator must wait between weight commits on a subnet."},"adjustmentInterval":{"type":"number","description":"AdjustmentInterval is number of blocks that pass between difficulty and burn adjustments. So, I was wrong about \"next block\" when I said that if root sets difficulty outside of range, it will get back in range. Difficulty will get back in range at most after AdjustmentInterval blocks pass."},"activityCutoff":{"type":"number","description":"The number of blocks for the stake to become inactive for the purpose of epoch in Yuma Consensus. If a validator doesn't submit weights within the first ActivityCutoff blocks of the epoch, it will not be able to participate until the start of the next epoch."},"registrationAllowed":{"type":"boolean","description":"NetworkRegistrationAllowed determines if burned registrations are allowed. If both burned and pow registrations are disabled, the subnet will not get emissions."},"targetRegsPerInterval":{"type":"number","description":"Maximum number of neuron registrations allowed per interval. Interval is AdjustmentInterval."},"minBurn":{"type":"number","description":"The minimum of the range of the dynamic burn cost for registering on the subnet."},"maxBurn":{"type":"number","description":"he maximum of the dynamic range for TAO cost of burn registration on the subnet."},"bondsMovingAvg":{"type":"number","description":"The moving average of bonds. The higher bonds yield to higher dividends for validators. See [Yuma Consensus: bonding mechanics](https://docs.bittensor.com/yuma-consensus#bonding-mechanics)."},"maxRegsPerBlock":{"type":"number","description":"Maximum neuron registrations per block. Note: Actual limit may be lower, as there is also per interval limit TargetRegistrationsPerInterval."},"servingRateLimit":{"type":"number","description":"Rate limit for calling serve_axon and serve_prometheus extrinsics used by miners."},"maxValidators":{"type":"number","description":"Maximum validators on a subnet."},"adjustmentAlpha":{"type":"string","description":"AdjustmentAlpha is the rate at which difficulty and burn are adjusted up or down"},"difficulty":{"type":"number","description":"Current dynamically computed value for the proof-of-work (POW) requirement for POW hotkey registration. Decreases over time but increases after new registrations, between the min and the maximum set by the subnet creator."},"commitRevealPeriod":{"type":"number","description":"How long, in blocks, the consensus weights for a subnet remain time-lock encrypted, preventing weight-copying."},"commitRevealWeightsEnabled":{"type":"boolean","description":"Enables Commit Reveal. See [Commit Reveal](https://docs.bittensor.com/subnets/commit-reveal)."},"alphaHigh":{"type":"number","description":"Upper bounds for the liquid alpha parameter."},"alphaLow":{"type":"number","description":"Lower bounds for the liquid alpha parameter."},"liquidAlphaEnabled":{"type":"boolean","description":"Enables the [liquid alpha](https://docs.bittensor.com/subnets/consensus-based-weights) feature."}},"required":["rho","kappa","immunityPeriod","minAllowedWeights","maxWeightsLimit","tempo","minDifficulty","maxDifficulty","weightsVersion","weightsRateLimit","adjustmentInterval","activityCutoff","registrationAllowed","targetRegsPerInterval","minBurn","maxBurn","bondsMovingAvg","maxRegsPerBlock","servingRateLimit","maxValidators","adjustmentAlpha","difficulty","commitRevealPeriod","commitRevealWeightsEnabled","alphaHigh","alphaLow","liquidAlphaEnabled"]},"LatestBlockDto":{"type":"object","properties":{"parentHash":{"type":"string","description":"The parent hash of the block","example":"0x56a255a1ed8eb98fde76ba92692f1272197464fe40b4bc938f9cc3ae3dea9bb7"},"blockNumber":{"type":"number","description":"The block number of the block","example":42069},"stateRoot":{"type":"string","description":"The state root of the block","example":"0xc95e11b40425b3c3bd6302eba0ffa32e572102d287fc4cf7ebe6a38a950ddc89"},"extrinsicsRoot":{"type":"string","description":"The extrinsics root of the block","example":"0xe846ab1234bd62370a6b4197c3bedd1a9f0b29920b54756154ec53db4cd494fe"}},"required":["parentHash","blockNumber","stateRoot","extrinsicsRoot"]},"SetWeightsParamsDto":{"type":"object","properties":{"netuid":{"type":"number","description":"Netuid","example":1},"dests":{"description":"UID","example":[0,1,2,3],"type":"array","items":{"type":"string"}},"weights":{"description":"Weights","example":[1,2,3,4],"type":"array","items":{"type":"string"}},"versionKey":{"type":"number","description":"Version Key","example":1}},"required":["netuid","dests","weights","versionKey"]},"SetCommitRevealWeightsParamsDto":{"type":"object","properties":{"netuid":{"type":"number","description":"Netuid","example":1},"commit":{"type":"string","description":"Commit","example":"0x78b67e3f8062eb063934f935e5c79dc47928d594c16ea2841f8225667b4440f4"},"revealRound":{"type":"number","description":"Reveal Round","example":1}},"required":["netuid","commit","revealRound"]}}}}