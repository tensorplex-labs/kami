{"openapi":"3.0.0","paths":{"/chain/neurons/{netuid}":{"get":{"operationId":"ChainController_getNeurons","parameters":[{"name":"netuid","required":true,"in":"path","schema":{"type":"number"}},{"name":"hotkey","required":true,"in":"query","schema":{"type":"boolean"}},{"name":"axon","required":true,"in":"query","schema":{"type":"boolean"}}],"responses":{"200":{"description":""}},"tags":["chain"]}},"/chain/subnet-hyperparameters/{netuid}":{"get":{"description":"Retrieves all hyperparameters for a specific subnet identified by netuid","operationId":"ChainController_getSubnetHyperparams","parameters":[{"name":"netuid","required":true,"in":"path","description":"Network UID identifying the subnet","schema":{"example":1,"type":"number"}}],"responses":{"200":{"description":"Subnet hyperparameters retrieved successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SubnetHyperparamsResponseDto"}}}},"400":{"description":"Invalid netuid parameter"},"404":{"description":"Subnet not found"},"500":{"description":"Internal server error during blockchain communication"}},"summary":"Get subnet hyperparameters","tags":["chain"]}},"/chain/subnet-metagraph/{netuid}":{"get":{"operationId":"ChainController_getSubnetMetagraph","parameters":[{"name":"netuid","required":true,"in":"path","schema":{"type":"number"}}],"responses":{"200":{"description":""}},"tags":["chain"]}},"/chain/total-networks":{"get":{"operationId":"ChainController_getTotalNetworks","parameters":[],"responses":{"200":{"description":""}},"tags":["chain"]}},"/chain/latest-block":{"get":{"operationId":"ChainController_getLatestBlock","parameters":[],"responses":{"200":{"description":""}},"tags":["chain"]}},"/chain/nonce/{walletAddress}":{"get":{"operationId":"ChainController_getNonce","parameters":[{"name":"walletAddress","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":""}},"tags":["chain"]}},"/chain/current-wallet-info":{"get":{"operationId":"ChainController_getCurrentWalletinfo","parameters":[],"responses":{"200":{"description":""}},"tags":["chain"]}},"/chain/check-hotkey":{"get":{"operationId":"ChainController_checkHotkey","parameters":[{"name":"netuid","required":true,"in":"query","schema":{"type":"number"}},{"name":"hotkey","required":true,"in":"query","schema":{"type":"string"}},{"name":"block","required":true,"in":"query","schema":{"type":"number"}}],"responses":{"200":{"description":""}},"tags":["chain"]}},"/chain/serve-axon":{"post":{"operationId":"ChainController_serveAxon","parameters":[],"responses":{"201":{"description":""}},"tags":["chain"]}},"/chain/set-weights":{"post":{"operationId":"ChainController_setWeights","parameters":[],"responses":{"201":{"description":""}},"tags":["chain"]}}},"info":{"title":"Tensorplex Kami","description":"API for Tensorplex Kami","version":"1.0","contact":{}},"tags":[{"name":"substrate","description":""}],"servers":[],"components":{"schemas":{"SubnetHyperparamsResponseDto":{"type":"object","properties":{"rho":{"type":"number","description":"Scaling factor in the sigmoid that normalises the steepness of the sigmoid curve."},"kappa":{"type":"number","description":"The consensus majority ratio: The weights set by validators who have lower normalized stake than Kappa are not used in calculating consensus, which affects ranks, which affect incentives. The consensus threshold for bond-clipping during [Yuma Consensus](https://docs.bittensor.com/yuma-consensus)."},"immunityPeriod":{"type":"number","description":"The number of blocks after registration when a miner is protected from deregistration."},"minAllowedWeights":{"type":"number","description":"Minimum number of weights for a validator to set when setting weights."},"maxWeightsLimit":{"type":"number","description":"The limit for the u16-normalized weights. If some weight is greater than this limit when all weights are normalized so that maximum weight is 65535, then it will not be used."},"tempo":{"type":"number","description":"Length of subnet tempo in blocks. See [Emissions](https://docs.bittensor.com/emissions)."},"minDifficulty":{"type":"number","description":"The minimum of the range of the proof-of-work for registering on the subnet."},"maxDifficulty":{"type":"number","description":"The maximum of the dynamic range for difficulty of proof-of-work registration on the subnet."},"weightsVersion":{"type":"number","description":"If the version key specified in set_weights extrinsic is lower than this system-wide setting (WeightsVersionKey), the transaction will fail. This is a fool-proofing protection for validators to update, not a security feature."},"weightsRateLimit":{"type":"number","description":"How long, in blocks, a validator must wait between weight commits on a subnet."},"adjustmentInterval":{"type":"number","description":"AdjustmentInterval is number of blocks that pass between difficulty and burn adjustments. So, I was wrong about \"next block\" when I said that if root sets difficulty outside of range, it will get back in range. Difficulty will get back in range at most after AdjustmentInterval blocks pass."},"activityCutoff":{"type":"number","description":"The number of blocks for the stake to become inactive for the purpose of epoch in Yuma Consensus. If a validator doesn't submit weights within the first ActivityCutoff blocks of the epoch, it will not be able to participate until the start of the next epoch."},"registrationAllowed":{"type":"boolean","description":"NetworkRegistrationAllowed determines if burned registrations are allowed. If both burned and pow registrations are disabled, the subnet will not get emissions."},"targetRegsPerInterval":{"type":"number","description":"Maximum number of neuron registrations allowed per interval. Interval is AdjustmentInterval."},"minBurn":{"type":"number","description":"The minimum of the range of the dynamic burn cost for registering on the subnet."},"maxBurn":{"type":"number","description":"he maximum of the dynamic range for TAO cost of burn registration on the subnet."},"bondsMovingAvg":{"type":"number","description":"The moving average of bonds. The higher bonds yield to higher dividends for validators. See [Yuma Consensus: bonding mechanics](https://docs.bittensor.com/yuma-consensus#bonding-mechanics)."},"maxRegsPerBlock":{"type":"number","description":"Maximum neuron registrations per block. Note: Actual limit may be lower, as there is also per interval limit TargetRegistrationsPerInterval."},"servingRateLimit":{"type":"number","description":"Rate limit for calling serve_axon and serve_prometheus extrinsics used by miners."},"maxValidators":{"type":"number","description":"Maximum validators on a subnet."},"adjustmentAlpha":{"type":"number","description":"AdjustmentAlpha is the rate at which difficulty and burn are adjusted up or down"},"difficulty":{"type":"number","description":"Current dynamically computed value for the proof-of-work (POW) requirement for POW hotkey registration. Decreases over time but increases after new registrations, between the min and the maximum set by the subnet creator."},"commitRevealPeriod":{"type":"number","description":"How long, in blocks, the consensus weights for a subnet remain time-lock encrypted, preventing weight-copying."},"commitRevealWeightsEnabled":{"type":"boolean","description":"Enables Commit Reveal. See [Commit Reveal](https://docs.bittensor.com/subnets/commit-reveal)."},"alphaHigh":{"type":"number","description":"Upper bounds for the liquid alpha parameter."},"alphaLow":{"type":"number","description":"Lower bounds for the liquid alpha parameter."},"liquidAlphaEnabled":{"type":"boolean","description":"Enables the [liquid alpha](https://docs.bittensor.com/subnets/consensus-based-weights) feature."}},"required":["rho","kappa","immunityPeriod","minAllowedWeights","maxWeightsLimit","tempo","minDifficulty","maxDifficulty","weightsVersion","weightsRateLimit","adjustmentInterval","activityCutoff","registrationAllowed","targetRegsPerInterval","minBurn","maxBurn","bondsMovingAvg","maxRegsPerBlock","servingRateLimit","maxValidators","adjustmentAlpha","difficulty","commitRevealPeriod","commitRevealWeightsEnabled","alphaHigh","alphaLow","liquidAlphaEnabled"]}}}}