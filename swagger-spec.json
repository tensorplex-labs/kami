{"openapi":"3.0.0","paths":{"/substrate/available-runtime-apis":{"get":{"description":"Retrieves all available runtime APIs","operationId":"getAvailableRuntimeApis","parameters":[],"responses":{"200":{"description":"Available runtime APIs retrieved successfully"}},"summary":"Get available runtime APIs","tags":["substrate"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nasync def main():\n    load_dotenv()\n    kami = Kami()\n\n    available_runtime_api = await kami.get_available_runtime_api()\n    print(\"Available runtime definitions and methods:\")\n    for runtime in available_runtime_api:\n        runtime_name = runtime['name']\n        print(f\"\\n📦 {runtime_name}\")\n        for method in runtime['methods']:\n            method_name = method['name']\n            print(f\"  ├─ {method_name}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nasync def main():\n    load_dotenv()\n    kami = Kami()\n\n    available_runtime_api = await kami.get_available_runtime_api()\n    print(\"Available runtime definitions and methods:\")\n    for runtime in available_runtime_api:\n        runtime_name = runtime['name']\n        print(f\"\\n📦 {runtime_name}\")\n        for method in runtime['methods']:\n            method_name = method['name']\n            print(f\"  ├─ {method_name}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/substrate/keyring-pair-info":{"get":{"description":"Retrieves the current keyring pair information","operationId":"getKeyringPairInfo","parameters":[],"responses":{"200":{"description":"Keyring pair info retrieved successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/KeyringPairInfoDto"}}}]}}}}},"summary":"Get keyring pair info","tags":["substrate"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    \n    keyring_pair_info = await kami.get_keyring_pair_info()\n    print(f\"Coldkey SS58 address: {keyring_pair_info.walletColdkey}\")\n    print(f\"Hotkey SS58 address: {keyring_pair_info.keyringPair.address}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    \n    keyring_pair_info = await kami.get_keyring_pair_info()\n    print(f\"Coldkey SS58 address: {keyring_pair_info.walletColdkey}\")\n    print(f\"Hotkey SS58 address: {keyring_pair_info.keyringPair.address}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/substrate/runtime-spec-version":{"get":{"description":"Retrieves the current runtime spec version","operationId":"getRuntimeSpecVersion","parameters":[],"responses":{"200":{"description":"Runtime spec version retrieved successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/SubstrateRuntimeSpecVersionDto"}}}]}}}}},"summary":"Get runtime spec version","tags":["substrate"]}},"/substrate/health":{"get":{"description":"Checks the health of Kami instance","operationId":"healthCheck","parameters":[],"responses":{"200":{"description":"Kami instance is healthy","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/SubstrateHealthCheckDto"}}}]}}}}},"summary":"Health check","tags":["substrate"]}},"/chain/subnet-metagraph/{netuid}":{"get":{"description":"Retrieves all subnet metagraph information by netuid","operationId":"getSubnetMetagraph","parameters":[{"name":"netuid","required":true,"in":"path","description":"Network UID","schema":{"type":"number"}}],"responses":{"200":{"description":"Subnet metagraph retrieved successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/SubnetMetagraphDto"}}}]}}}},"404":{"description":"Subnet metagraph not found","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"error":{"$ref":"#/components/schemas/ErrorDto"}}}]}}}}},"summary":"Get subnet metagraph","tags":["subnet"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nimport os\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    \n    metagraph = await kami.get_metagraph(netuid)\n    print(f\"Number of registered Coldkeys: {len(metagraph.coldkeys)}\")\n    print(f\"Number of registered Hotkeys: {len(metagraph.hotkeys)}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nimport os\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    \n    metagraph = await kami.get_metagraph(netuid)\n    print(f\"Number of registered Coldkeys: {len(metagraph.coldkeys)}\")\n    print(f\"Number of registered Hotkeys: {len(metagraph.hotkeys)}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/chain/subnet-hyperparameters/{netuid}":{"get":{"description":"Retrieves all subnet hyperparameter information by netuid","operationId":"getSubnetHyperparams","parameters":[{"name":"netuid","required":true,"in":"path","description":"Network UID","schema":{"type":"number"}}],"responses":{"200":{"description":"Subnet hyperparameter retrieved successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/SubnetHyperparamsResponseDto"}}}]}}}}},"summary":"Get subnet hyperparameter","tags":["subnet"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nimport os\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    \n    hyperparameters = await kami.get_subnet_hyperparameters(netuid)\n    print(f\"Registration Allowed: {hyperparameters.registrationAllowed}\")\n    print(f\"Max Difficulty: {hyperparameters.maxDifficulty}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nimport os\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    \n    hyperparameters = await kami.get_subnet_hyperparameters(netuid)\n    print(f\"Registration Allowed: {hyperparameters.registrationAllowed}\")\n    print(f\"Max Difficulty: {hyperparameters.maxDifficulty}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/chain/serve-axon":{"post":{"description":"Must setup Bittensor wallet in env","operationId":"serveAxon","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AxonCallParamsDto"}}}},"responses":{"200":{"description":"Operation completed successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"type":"string","description":"Extrinsic hash","example":"0xce230ef4308b4073e448a4b92ea7ebf40385568ebe93598b6cde7cc3658dc499"}}}]}}}}},"summary":"Serve axon","tags":["subnet"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom kami.types import ServeAxonPayload\nimport os\nfrom dotenv import load_dotenv\n\nfrom loguru import logger\nimport bittensor\nfrom bittensor.utils.networking import ip_to_int, ip_version\n\nasync def main():\n    load_dotenv()\n    kami = Kami()\n\n\n    wallet_name = os.getenv(\"WALLET_COLDKEY\")\n    wallet_hotkey = os.getenv(\"WALLET_HOTKEY\")\n    wallet_path = os.getenv(\"WALLET_PATH\")\n    netuid = os.getenv(\"NETUID\")\n    axon_port = os.getenv(\"AXON_PORT\")\n    wallet = bittensor.wallet(name=wallet_name, hotkey=wallet_hotkey, path=wallet_path)\n    axon = bittensor.axon(wallet=wallet, port=int(axon_port))\n\n    # Serve passes the axon information to the network + netuid we are hosting on.\n    # This will auto-update if the axon port of external ip have changed.\n    logger.info(f\"Serving miner axon {axon} with netuid: {netuid}\")\n\n    axon_payload = ServeAxonPayload(\n        netuid=netuid,\n        port=axon.external_port,\n        ip=ip_to_int(axon.external_ip),\n        ipType=ip_version(axon.external_ip),\n        protocol=ip_version(axon.external_ip),\n        version=1,\n    )\n    print(f\"Axon payload: {axon_payload}\")\n    if not await kami.check_if_axon_served(axon_payload):\n        print(\"Axon not served, serving axon...\")\n        serve_success = await kami.serve_axon(axon_payload)\n        if serve_success.get(\"statusCode\", None) == 200:\n            logger.success(\"Successfully served axon for miner!\")\n        else:\n            logger.error(\n                f\"Failed to serve axon for miner, exiting with error message: {serve_success.get('message')}\"\n            )\n            exit()\n    else:\n        logger.info(\"Axon already served, no need to serve again.\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom kami.types import ServeAxonPayload\nimport os\nfrom dotenv import load_dotenv\n\nfrom loguru import logger\nimport bittensor\nfrom bittensor.utils.networking import ip_to_int, ip_version\n\nasync def main():\n    load_dotenv()\n    kami = Kami()\n\n\n    wallet_name = os.getenv(\"WALLET_COLDKEY\")\n    wallet_hotkey = os.getenv(\"WALLET_HOTKEY\")\n    wallet_path = os.getenv(\"WALLET_PATH\")\n    netuid = os.getenv(\"NETUID\")\n    axon_port = os.getenv(\"AXON_PORT\")\n    wallet = bittensor.wallet(name=wallet_name, hotkey=wallet_hotkey, path=wallet_path)\n    axon = bittensor.axon(wallet=wallet, port=int(axon_port))\n\n    # Serve passes the axon information to the network + netuid we are hosting on.\n    # This will auto-update if the axon port of external ip have changed.\n    logger.info(f\"Serving miner axon {axon} with netuid: {netuid}\")\n\n    axon_payload = ServeAxonPayload(\n        netuid=netuid,\n        port=axon.external_port,\n        ip=ip_to_int(axon.external_ip),\n        ipType=ip_version(axon.external_ip),\n        protocol=ip_version(axon.external_ip),\n        version=1,\n    )\n    print(f\"Axon payload: {axon_payload}\")\n    if not await kami.check_if_axon_served(axon_payload):\n        print(\"Axon not served, serving axon...\")\n        serve_success = await kami.serve_axon(axon_payload)\n        if serve_success.get(\"statusCode\", None) == 200:\n            logger.success(\"Successfully served axon for miner!\")\n        else:\n            logger.error(\n                f\"Failed to serve axon for miner, exiting with error message: {serve_success.get('message')}\"\n            )\n            exit()\n    else:\n        logger.info(\"Axon already served, no need to serve again.\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/chain/set-weights":{"post":{"description":"Must setup Bittensor wallet in env","operationId":"setWeights","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetWeightsParamsDto"}}}},"responses":{"200":{"description":"Operation completed successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"type":"string","description":"Extrinsic hash","example":"0xce230ef4308b4073e448a4b92ea7ebf40385568ebe93598b6cde7cc3658dc499"}}}]}}}}},"summary":"Set weights","tags":["subnet"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom kami.types import SetWeightsPayload\nimport os\nfrom dotenv import load_dotenv\n\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    uids = [1, 2, 3]\n    weights = [1000, 2000, 3000]\n    version_key = 1\n\n    payload = SetWeightsPayload(netuid=int(netuid), dests=uids, weights=weights, version_key=version_key)\n    await kami.set_weights(payload)\n    ## Sets Commit Reveal weights automatically if Commit Reveal is enabled\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom kami.types import SetWeightsPayload\nimport os\nfrom dotenv import load_dotenv\n\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    uids = [1, 2, 3]\n    weights = [1000, 2000, 3000]\n    version_key = 1\n\n    payload = SetWeightsPayload(netuid=int(netuid), dests=uids, weights=weights, version_key=version_key)\n    await kami.set_weights(payload)\n    ## Sets Commit Reveal weights automatically if Commit Reveal is enabled\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/chain/set-commit-reveal-weights":{"post":{"description":"Must setup Bittensor wallet in env","operationId":"setCommitRevealWeights","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetCommitRevealWeightsParamsDto"}}}},"responses":{"200":{"description":"Operation completed successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"type":"string","description":"Extrinsic hash","example":"0xce230ef4308b4073e448a4b92ea7ebf40385568ebe93598b6cde7cc3658dc499"}}}]}}}}},"summary":"Set commit reveal weights","tags":["subnet"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom kami.types import SetWeightsPayload\nimport os\nfrom dotenv import load_dotenv\n\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    uids = [1, 2, 3]\n    weights = [1000, 2000, 3000]\n    version_key = 1\n\n    payload = SetWeightsPayload(netuid=int(netuid), dests=uids, weights=weights, version_key=version_key)\n    await kami.set_weights(payload)\n    ## Sets Commit Reveal weights automatically if Commit Reveal is enabled\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom kami.types import SetWeightsPayload\nimport os\nfrom dotenv import load_dotenv\n\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    uids = [1, 2, 3]\n    weights = [1000, 2000, 3000]\n    version_key = 1\n\n    payload = SetWeightsPayload(netuid=int(netuid), dests=uids, weights=weights, version_key=version_key)\n    await kami.set_weights(payload)\n    ## Sets Commit Reveal weights automatically if Commit Reveal is enabled\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/chain/latest-block":{"get":{"description":"Retrieves the latest block from the blockchain","operationId":"getLatestBlock","parameters":[],"responses":{"200":{"description":"Latest block retrieved successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/LatestBlockDto"}}}]}}}}},"summary":"Get latest block","tags":["substrate"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    \n    block = await kami.get_current_block()\n    print(f\"Latest Block: {block}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    \n    block = await kami.get_current_block()\n    print(f\"Latest Block: {block}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/chain/check-hotkey":{"get":{"description":"If a block is provided, the hotkey will be checked against the block.","operationId":"checkHotkey","parameters":[{"name":"netuid","required":true,"in":"query","description":"Subnet UID","schema":{"example":52,"type":"number"}},{"name":"hotkey","required":true,"in":"query","description":"Hotkey","schema":{"example":"5E4z3h9yVhmQyCFWNbY9BPpwhx4xFiPwq3eeqmBgVF6KULde","type":"string"}},{"name":"block","required":false,"in":"query","description":"Block","schema":{"example":1000000,"type":"number"}}],"responses":{"200":{"description":"Successfully checked hotkey on metagraph","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/CheckHotkeyDto"}}}]}}}}},"summary":"Check if a hotkey is valid on a subnet","tags":["subnet"],"x-code-samples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nimport os\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    \n    keyring_pair_info = await kami.get_keyring_pair_info()\n    hotkey = keyring_pair_info.keyringPair.address\n\n    is_hotkey_registered = await kami.is_hotkey_registered(netuid, hotkey)\n    print(f\"Is hotkey {hotkey} registered on netuid {netuid}: {is_hotkey_registered}\")\n    ## Is hotkey 5XXX registered on netuid 98: True\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}],"x-codeSamples":[{"lang":"Python","label":"Python","source":"from kami import Kami\nfrom dotenv import load_dotenv\nimport os\nasync def main():\n    load_dotenv()\n    kami = Kami()\n    netuid = os.getenv(\"NETUID\")\n    \n    keyring_pair_info = await kami.get_keyring_pair_info()\n    hotkey = keyring_pair_info.keyringPair.address\n\n    is_hotkey_registered = await kami.is_hotkey_registered(netuid, hotkey)\n    print(f\"Is hotkey {hotkey} registered on netuid {netuid}: {is_hotkey_registered}\")\n    ## Is hotkey 5XXX registered on netuid 98: True\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n"}]}},"/substrate/account-nonce/{account}":{"get":{"description":"Get the nonce of an account","operationId":"getAccountNonce","parameters":[{"name":"account","required":true,"in":"path","description":"SS58 Address","schema":{"example":"5E4z3h9yVhmQyCFWNbY9BPpwhx4xFiPwq3eeqmBgVF6KULde","type":"string"}}],"responses":{"200":{"description":"Successfully checked hotkey on metagraph","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/AccountNonceDto"}}}]}}}}},"summary":"Get the nonce of an account","tags":["substrate"]}},"/substrate/sign-message/sign":{"post":{"description":"Sign a message with a keyring pair.","operationId":"signMessage","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignMessageParamDto"}}}},"responses":{"200":{"description":"Message signed successfully.","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/SignMessageResponseDto"}}}]}}}}},"summary":"Sign a message.","tags":["substrate"]}},"/substrate/sign-message/verify":{"post":{"description":"Verify a signature with a keyring pair.","operationId":"verifyMessage","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VerifyMessageParamDto"}}}},"responses":{"200":{"description":"Signature verified successfully.","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"$ref":"#/components/schemas/VerifyMessageResponseDto"}}}]}}}}},"summary":"Verify a signature.","tags":["substrate"]}},"/chain/set-timelocked-weights":{"post":{"description":"Must setup Bittensor wallet in env","operationId":"setTimelockedWeights","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetTimelockedWeightsParamsDto"}}}},"responses":{"200":{"description":"Operation completed successfully","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ApiResponseDto"},{"properties":{"data":{"type":"string","description":"Extrinsic hash","example":"0xce230ef4308b4073e448a4b92ea7ebf40385568ebe93598b6cde7cc3658dc499"}}}]}}}}},"summary":"Set timelocked weights","tags":["subnet"]}}},"info":{"title":"Tensorplex Kami","description":"Ultra-light server library written in TypeScript for interacting with the Bittensor chain.\n\nExample code samples provided work with the Kami boilerplate Python code in the repo [here](https://github.com/tensorplex-labs/kami/tree/main/docs/python-examples).\n\nYou may also test out the endpoints through [Swagger UI](http://localhost:3000/docs) once the Kami instance is running locally.","version":"1.0","contact":{"name":"Tensorplex Labs","url":"https://tensorplex.ai","email":""}},"tags":[],"servers":[{"url":"http://localhost:3000","description":"Development"}],"components":{"schemas":{"ErrorDto":{"type":"object","properties":{"type":{"type":"string","description":"Error Type Enum Defined in Exception","example":"SUBNET_METAGRAPH.NOT_FOUND"},"message":{"type":"string","description":"Error Message","example":"Subnet metagraph with ID 1000 not found"},"stackTrace":{"type":"string","description":"Error Stack Trace"}},"required":["type","message"]},"ApiResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"Status Code","example":200},"success":{"type":"boolean","description":"Success","example":true},"data":{"type":"object","description":"Data","example":null},"error":{"description":"Error Details","example":null,"allOf":[{"$ref":"#/components/schemas/ErrorDto"}]}},"required":["statusCode","success","data","error"]},"KeyringPairDto":{"type":"object","properties":{"address":{"type":"string","description":"Hotkey","example":"5E4z3h9yVhmQyCFWNbY9BPpwhx4xFiPwq3eeqmBgVF6KULde"},"addressRaw":{"type":"object","description":"Raw Address"},"isLocked":{"type":"boolean","description":"Is locked","example":true},"meta":{"description":"Metadata","type":"array","items":{"type":"string"}},"publicKey":{"type":"object","description":"Public key"},"type":{"type":"string","description":"Type","example":"sr25519"}},"required":["address","addressRaw","isLocked","meta","publicKey","type"]},"KeyringPairInfoDto":{"type":"object","properties":{"keyringPair":{"description":"The keyring pair","allOf":[{"$ref":"#/components/schemas/KeyringPairDto"}]},"walletColdkey":{"type":"string","description":"The wallet coldkey","example":"5DSsZGwBuYHRDA7HzdZUVBhKKpZpJKcf7rTd9y5Gz1SQyo9V"}},"required":["keyringPair","walletColdkey"]},"SubstrateHealthCheckDto":{"type":"object","properties":{"latestBlock":{"type":"number","description":"Latest block","example":1},"runtimeSpecVersionDuringKamiInitialization":{"type":"number","description":"Runtime spec version during Kami initialization","example":273},"runtimeSpecVersionDuringHealthCheck":{"type":"number","description":"Runtime spec version during health check","example":273}},"required":["latestBlock","runtimeSpecVersionDuringKamiInitialization","runtimeSpecVersionDuringHealthCheck"]},"SubstrateRuntimeSpecVersionDto":{"type":"object","properties":{"specVersion":{"type":"number","description":"Spec version","example":273}},"required":["specVersion"]},"SubnetIdentityDto":{"type":"object","properties":{"subnetName":{"type":"string","description":"The subnet name","example":"Dojo"},"githubRepo":{"type":"string","description":"The GitHub repository","example":"https://github.com/tensorplex-labs/dojo"},"subnetContact":{"type":"string","description":"The contact URL","example":"jarvis@tensorplex.ai"},"subnetUrl":{"type":"string","description":"The URL","example":"https://dojo.network"},"discord":{"type":"string","description":"The Discord URL","example":"https://discord.com/channels/799672011265015819/1213131262483628102"},"description":{"type":"string","description":"The description","example":"Premier Infrastructure Layer for Human Intelligence."},"additional":{"type":"string","description":"The additional information","example":"~"}},"required":["subnetName","githubRepo","subnetContact","subnetUrl","discord","description","additional"]},"IdentitiesInfoDto":{"type":"object","properties":{"name":{"type":"string","description":"Name","example":""},"url":{"type":"string","description":"URL","example":""},"githubRepo":{"type":"string","description":"GitHub Repository","example":""},"image":{"type":"string","description":"Image","example":""},"discord":{"type":"string","description":"Discord","example":""},"description":{"type":"string","description":"Description","example":""},"additional":{"type":"string","description":"Additional","example":""}},"required":["name","url","githubRepo","image","discord","description","additional"]},"AxonInfoDto":{"type":"object","properties":{"block":{"type":"number","description":"Block","example":0},"version":{"type":"number","description":"Version","example":0},"ip":{"type":"number","description":"IP","example":0},"port":{"type":"number","description":"Port","example":0},"ipType":{"type":"number","description":"IP Type (v4 or v6)","example":4},"protocol":{"type":"number","description":"Protocol","example":4},"placeholder1":{"type":"number","description":"Placeholder 1","example":0},"placeholder2":{"type":"number","description":"Placeholder 2","example":0}},"required":["block","version","ip","port","ipType","protocol","placeholder1","placeholder2"]},"SubnetMetagraphDto":{"type":"object","properties":{"netuid":{"type":"number","description":"The subnet UID","example":1},"name":{"description":"The subnet name","example":"Tensorplex Dojo","type":"array","items":{"type":"string"}},"symbol":{"description":"The subnet symbol","example":"ا","type":"array","items":{"type":"string"}},"identity":{"description":"The subnet identity","allOf":[{"$ref":"#/components/schemas/SubnetIdentityDto"}]},"networkRegisteredAt":{"type":"number","description":"The network registered at","example":3989825},"ownerHotkey":{"type":"string","description":"The owner hotkey","example":"5EgfUiH6A99dhihMzp7eMM8UDkvmFjCWgM5gnpBN8UgLrVuz"},"ownerColdkey":{"type":"string","description":"The owner coldkey","example":"5EgfUiH6A99dhihMzp7eMM8UDkvmFjCWgM5gnpBN8UgLrVuz"},"block":{"type":"number","description":"Current block","example":3989825},"tempo":{"type":"number","description":"The tempo","example":360},"lastStep":{"type":"number","description":"Last step","example":170},"blocksSinceLastStep":{"type":"number","description":"Blocks since last step","example":3989825},"subnetEmission":{"type":"number","description":"Subnet emission","example":0},"alphaIn":{"type":"number","description":"alpha_in","example":0},"alphaOut":{"type":"number","description":"alpha_out","example":0},"taoIn":{"type":"number","description":"tao_in","example":0},"alphaOutEmission":{"type":"number","description":"alpha_out_emission","example":1},"alphaInEmission":{"type":"number","description":"alpha_in_emission","example":0},"taoInEmission":{"type":"number","description":"tao_in_emission","example":0},"pendingAlphaEmission":{"type":"number","description":"pending_alpha_emission","example":0},"pendingRootEmission":{"type":"number","description":"pending_root_emission","example":0},"subnetVolume":{"type":"number","description":"subnet_volume","example":0},"movingPrice":{"type":"object","description":"moving_price","example":{"bits":0}},"rho":{"type":"number","description":"rho","example":0},"kappa":{"type":"number","description":"kappa","example":0},"minAllowedWeights":{"type":"number","description":"Min Allowed Weights","example":0},"maxAllowedWeights":{"type":"number","description":"Max Allowed Weights","example":0},"weightsVersion":{"type":"number","description":"Weights Version","example":0},"weightsRateLimit":{"type":"number","description":"Weights Rate Limit","example":0},"activityCutoff":{"type":"number","description":"Activity Cutoff","example":0},"maxValidators":{"type":"number","description":"Max Validators","example":0},"numUids":{"type":"number","description":"Current number of UIDs","example":0},"maxUids":{"type":"number","description":"Max UIDs","example":0},"burn":{"type":"number","description":"Burn","example":0},"difficulty":{"type":"number","description":"Difficulty","example":0},"registrationAllowed":{"type":"boolean","description":"Registration Allowed","example":false},"powRegistrationAllowed":{"type":"boolean","description":"Pow Registration Allowed","example":false},"immunityPeriod":{"type":"number","description":"Immunity Period","example":0},"minDifficulty":{"type":"number","description":"Min Difficulty","example":0},"maxDifficulty":{"type":"string","description":"Max Difficulty","example":1},"minBurn":{"type":"number","description":"Min Burn","example":0},"maxBurn":{"type":"number","description":"Max Burn","example":0},"adjustmentAlpha":{"type":"string","description":"Adjustment Alpha","example":0},"adjustmentInterval":{"type":"number","description":"Adjustment Interval","example":0},"targetRegsPerInterval":{"type":"number","description":"Target Registrations Per Interval","example":0},"maxRegsPerBlock":{"type":"number","description":"Max Registrations Per Block","example":0},"servingRateLimit":{"type":"number","description":"Serving Rate Limit","example":0},"commitRevealWeightsEnabled":{"type":"boolean","description":"Commit Reveal Weights Enabled","example":false},"commitRevealPeriod":{"type":"number","description":"Commit Reveal Epoch","example":0},"liquidAlphaEnabled":{"type":"boolean","description":"Liquid Alpha Enabled","example":false},"alphaHigh":{"type":"number","description":"Alpha High","example":0},"alphaLow":{"type":"number","description":"Alpha Low","example":0},"bondsMovingAvg":{"type":"number","description":"Bonds Moving Average","example":0},"hotkeys":{"description":"Hotkeys","example":[],"type":"array","items":{"type":"string"}},"coldkeys":{"description":"Coldkeys","example":[],"type":"array","items":{"type":"string"}},"identities":{"description":"Identities","type":"array","items":{"$ref":"#/components/schemas/IdentitiesInfoDto"}},"axons":{"description":"Axons","type":"array","items":{"$ref":"#/components/schemas/AxonInfoDto"}},"active":{"description":"Active","example":[false],"type":"array","items":{"type":"string"}},"validatorPermit":{"description":"Validator Permit","example":[false],"type":"array","items":{"type":"string"}},"pruningScore":{"description":"Pruning Score","example":[0],"type":"array","items":{"type":"string"}},"lastUpdate":{"description":"Last Update","example":[0],"type":"array","items":{"type":"string"}},"emission":{"description":"Emission","example":[0],"type":"array","items":{"type":"string"}},"dividends":{"description":"Dividends","example":[0],"type":"array","items":{"type":"string"}},"incentives":{"description":"Incentives","example":[0],"type":"array","items":{"type":"string"}},"consensus":{"description":"Consensus","example":[0],"type":"array","items":{"type":"string"}},"trust":{"description":"Trust","example":[0],"type":"array","items":{"type":"string"}},"rank":{"description":"Rank","example":[0],"type":"array","items":{"type":"string"}},"blockAtRegistration":{"description":"Block At Registration","example":[0],"type":"array","items":{"type":"string"}},"alphaStake":{"description":"Alpha Stake","example":[0],"type":"array","items":{"type":"string"}},"taoStake":{"description":"Root Stake","example":[0],"type":"array","items":{"type":"string"}},"totalStake":{"description":"Total Stake","example":[0],"type":"array","items":{"type":"string"}},"taoDividendsPerHotkey":{"description":"Tao Dividends Per Hotkey","example":["",0],"type":"array","items":{"type":"string"}},"alphaDividendsPerHotkey":{"description":"Alpha Dividends Per Hotkey","example":["",0],"type":"array","items":{"type":"string"}}},"required":["netuid","name","symbol","identity","networkRegisteredAt","ownerHotkey","ownerColdkey","block","tempo","lastStep","blocksSinceLastStep","subnetEmission","alphaIn","alphaOut","taoIn","alphaOutEmission","alphaInEmission","taoInEmission","pendingAlphaEmission","pendingRootEmission","subnetVolume","movingPrice","rho","kappa","minAllowedWeights","maxAllowedWeights","weightsVersion","weightsRateLimit","activityCutoff","maxValidators","numUids","maxUids","burn","difficulty","registrationAllowed","powRegistrationAllowed","immunityPeriod","minDifficulty","maxDifficulty","minBurn","maxBurn","adjustmentAlpha","adjustmentInterval","targetRegsPerInterval","maxRegsPerBlock","servingRateLimit","commitRevealWeightsEnabled","commitRevealPeriod","liquidAlphaEnabled","alphaHigh","alphaLow","bondsMovingAvg","hotkeys","coldkeys","identities","axons","active","validatorPermit","pruningScore","lastUpdate","emission","dividends","incentives","consensus","trust","rank","blockAtRegistration","alphaStake","taoStake","totalStake","taoDividendsPerHotkey","alphaDividendsPerHotkey"]},"SubnetHyperparamsResponseDto":{"type":"object","properties":{"rho":{"type":"number","description":"Scaling factor in the sigmoid that normalises the steepness of the sigmoid curve.","example":10},"kappa":{"type":"number","description":"The consensus majority ratio: The weights set by validators who have lower normalized stake than Kappa are not used in calculating consensus, which affects ranks, which affect incentives. The consensus threshold for bond-clipping during [Yuma Consensus](https://docs.bittensor.com/yuma-consensus).","example":32767},"immunityPeriod":{"type":"number","description":"The number of blocks after registration when a miner is protected from deregistration.","example":5000},"minAllowedWeights":{"type":"number","description":"Minimum number of weights for a validator to set when setting weights.","example":1},"maxWeightsLimit":{"type":"number","description":"The limit for the u16-normalized weights. If some weight is greater than this limit when all weights are normalized so that maximum weight is 65535, then it will not be used.","example":65535},"tempo":{"type":"number","description":"Length of subnet tempo in blocks. See [Emissions](https://docs.bittensor.com/emissions).","example":99},"minDifficulty":{"type":"number","description":"The minimum of the range of the proof-of-work for registering on the subnet.","example":10000000},"maxDifficulty":{"type":"number","description":"The maximum of the dynamic range for difficulty of proof-of-work registration on the subnet.","example":18446744073709552000},"weightsVersion":{"type":"number","description":"If the version key specified in set_weights extrinsic is lower than this system-wide setting (WeightsVersionKey), the transaction will fail. This is a fool-proofing protection for validators to update, not a security feature.","example":0},"weightsRateLimit":{"type":"number","description":"How long, in blocks, a validator must wait between weight commits on a subnet.","example":100},"adjustmentInterval":{"type":"number","description":"AdjustmentInterval is number of blocks that pass between difficulty and burn adjustments. So, I was wrong about \"next block\" when I said that if root sets difficulty outside of range, it will get back in range. Difficulty will get back in range at most after AdjustmentInterval blocks pass.","example":360},"activityCutoff":{"type":"number","description":"The number of blocks for the stake to become inactive for the purpose of epoch in Yuma Consensus. If a validator doesn't submit weights within the first ActivityCutoff blocks of the epoch, it will not be able to participate until the start of the next epoch.","example":5000},"registrationAllowed":{"type":"boolean","description":"NetworkRegistrationAllowed determines if burned registrations are allowed. If both burned and pow registrations are disabled, the subnet will not get emissions.","example":true},"targetRegsPerInterval":{"type":"number","description":"Maximum number of neuron registrations allowed per interval. Interval is AdjustmentInterval.","example":1},"minBurn":{"type":"number","description":"The minimum of the range of the dynamic burn cost for registering on the subnet.","example":500000},"maxBurn":{"type":"number","description":"he maximum of the dynamic range for TAO cost of burn registration on the subnet.","example":100000000000},"bondsMovingAvg":{"type":"number","description":"The moving average of bonds. The higher bonds yield to higher dividends for validators. See [Yuma Consensus: bonding mechanics](https://docs.bittensor.com/yuma-consensus#bonding-mechanics).","example":900000},"maxRegsPerBlock":{"type":"number","description":"Maximum neuron registrations per block. Note: Actual limit may be lower, as there is also per interval limit TargetRegistrationsPerInterval.","example":1},"servingRateLimit":{"type":"number","description":"Rate limit for calling serve_axon and serve_prometheus extrinsics used by miners.","example":50},"maxValidators":{"type":"number","description":"Maximum validators on a subnet.","example":64},"adjustmentAlpha":{"type":"string","description":"AdjustmentAlpha is the rate at which difficulty and burn are adjusted up or down","example":58000},"difficulty":{"type":"number","description":"Current dynamically computed value for the proof-of-work (POW) requirement for POW hotkey registration. Decreases over time but increases after new registrations, between the min and the maximum set by the subnet creator.","example":10000000},"commitRevealPeriod":{"type":"number","description":"How long, in blocks, the consensus weights for a subnet remain time-lock encrypted, preventing weight-copying.","example":1},"commitRevealWeightsEnabled":{"type":"boolean","description":"Enables Commit Reveal. See [Commit Reveal](https://docs.bittensor.com/subnets/commit-reveal).","example":true},"alphaHigh":{"type":"number","description":"Upper bounds for the liquid alpha parameter.","example":58982},"alphaLow":{"type":"number","description":"Lower bounds for the liquid alpha parameter.","example":45875},"liquidAlphaEnabled":{"type":"boolean","description":"Enables the [liquid alpha](https://docs.bittensor.com/subnets/consensus-based-weights) feature.","example":true}},"required":["rho","kappa","immunityPeriod","minAllowedWeights","maxWeightsLimit","tempo","minDifficulty","maxDifficulty","weightsVersion","weightsRateLimit","adjustmentInterval","activityCutoff","registrationAllowed","targetRegsPerInterval","minBurn","maxBurn","bondsMovingAvg","maxRegsPerBlock","servingRateLimit","maxValidators","adjustmentAlpha","difficulty","commitRevealPeriod","commitRevealWeightsEnabled","alphaHigh","alphaLow","liquidAlphaEnabled"]},"AxonCallParamsDto":{"type":"object","properties":{"version":{"type":"number","description":"Version","example":0},"ip":{"type":"number","title":"IP","description":"Decimal representation of the IP address","example":"2240446049"},"port":{"type":"number","description":"Port","example":8888},"ipType":{"type":"number","description":"IP Type (v4 or v6)","example":4},"netuid":{"type":"number","description":"Netuid","example":2},"protocol":{"type":"number","description":"Protocol","example":4},"placeholder1":{"type":"number","description":"Placeholder 1","example":0},"placeholder2":{"type":"number","description":"Placeholder 2","example":0}},"required":["version","ip","port","ipType","netuid","protocol","placeholder1","placeholder2"]},"SetWeightsParamsDto":{"type":"object","properties":{"netuid":{"type":"number","description":"Netuid","example":1},"dests":{"description":"UID","example":[0,1,2,3],"type":"array","items":{"type":"string"}},"weights":{"description":"Weights","example":[1,2,3,4],"type":"array","items":{"type":"string"}},"versionKey":{"type":"number","description":"Version Key","example":1}},"required":["netuid","dests","weights","versionKey"]},"SetCommitRevealWeightsParamsDto":{"type":"object","properties":{"netuid":{"type":"number","description":"Netuid","example":1},"commit":{"type":"string","description":"Commit","example":"b'\u0014·÷\u0002Ù7ªkD\u000bú3o\u0015ßYÈ\u000b\u0016Ææ\u0007s=¤fÍ¸...00AES_GCM_"},"revealRound":{"type":"number","description":"Reveal Round","example":1}},"required":["netuid","commit","revealRound"]},"LatestBlockDto":{"type":"object","properties":{"parentHash":{"type":"string","description":"The parent hash of the block","example":"0x56a255a1ed8eb98fde76ba92692f1272197464fe40b4bc938f9cc3ae3dea9bb7"},"blockNumber":{"type":"number","description":"The block number of the block","example":42069},"stateRoot":{"type":"string","description":"The state root of the block","example":"0xc95e11b40425b3c3bd6302eba0ffa32e572102d287fc4cf7ebe6a38a950ddc89"},"extrinsicsRoot":{"type":"string","description":"The extrinsics root of the block","example":"0xe846ab1234bd62370a6b4197c3bedd1a9f0b29920b54756154ec53db4cd494fe"}},"required":["parentHash","blockNumber","stateRoot","extrinsicsRoot"]},"CheckHotkeyDto":{"type":"object","properties":{"isHotkeyValid":{"type":"boolean","description":"Whether the hotkey is registered on the subnet","example":true}},"required":["isHotkeyValid"]},"AccountNonceDto":{"type":"object","properties":{"accountNonce":{"type":"number","description":"The nonce of the SS58 address","example":1}},"required":["accountNonce"]},"SignMessageResponseDto":{"type":"object","properties":{"signature":{"type":"string","description":"The signature of the signed message against keyring pair.","example":"string"}},"required":["signature"]},"VerifyMessageResponseDto":{"type":"object","properties":{"valid":{"type":"boolean","description":"If signature is valid.","example":"boolean"}},"required":["valid"]},"SignMessageParamDto":{"type":"object","properties":{"message":{"type":"string","description":"The signature of the signed message against keyring pair.","example":"string"}},"required":["message"]},"VerifyMessageParamDto":{"type":"object","properties":{"message":{"type":"string","description":"The message that is crafted for the signature to verify against.","example":"string"},"signature":{"type":"string","description":"The signature that is crafted for message to verify against in hex, will be converted to u8a during verification.","example":"string"},"signeeAddress":{"type":"string","description":"Wallet public key in ss58 address format.","example":"string"}},"required":["message","signature","signeeAddress"]},"SetTimelockedWeightsParamsDto":{"type":"object","properties":{"netuid":{"type":"number","description":"Netuid","example":1},"commit":{"type":"string","description":"Commit","example":"b'\u0014·÷\u0002Ù7ªkD\u000bú3o\u0015ßYÈ\u000b\u0016Ææ\u0007s=¤fÍ¸...00AES_GCM_"},"revealRound":{"type":"number","description":"Reveal Round","example":1},"commitRevealVersion":{"type":"number","description":"Commit Reveal Version","example":4,"default":4}},"required":["netuid","commit","revealRound","commitRevealVersion"]}}}}